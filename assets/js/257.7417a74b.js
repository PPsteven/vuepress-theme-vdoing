(window.webpackJsonp=window.webpackJsonp||[]).push([[257],{823:function(t,s,e){"use strict";e.r(s);var a=e(24),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"什么是rest？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是rest？"}},[t._v("#")]),t._v(" 什么是REST？")]),t._v(" "),e("p",[t._v("**REST（Representational State Transfer）**是种互联网软件架构模式，由 Roy Fielding 在他 2000 年的博士论文《架构风格与基于网络的软件架构设计》中提出，REST 一经提出就流行起来， 迅速取代了复杂笨重的 SOAP。")]),t._v(" "),e("p",[t._v("REST 是一种系统架构设计风格，主要面向基于网络的软件架构设计。")]),t._v(" "),e("p",[t._v("这一架构风格，包含了以下一些基本要求：")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("客户-服务器")]),t._v("\n在 REST 风格中，最基本的要求就是应当分离用户接口和数据存储，改善用户接口跨平台迁移的可移植性，同时简化服务器组件，改善系统的可伸缩性。")]),t._v(" "),e("p",[t._v("客户端负责与用户之间的交互处理，而服务器端则实现数据存储以及相关的业务逻辑。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("无状态")])]),t._v(" "),e("p",[t._v("服务端在设计接口时，应当设计为无状态接口。也就是说，服务器端不保存任何与客户端相关的状态上下文信息，客户端在每次调用服务端接口时，需要提供足够的信息，以供服务端完成操作。")]),t._v(" "),e("p",[t._v("无状态减少了服务端保存客户端相关上下文数据，这对于服务端带来的好处有：")]),t._v(" "),e("ul",[e("li",[t._v("更加容易的实现动态扩展，而不至于影响客户端使用")]),t._v(" "),e("li",[t._v("减少了服务端从故障中恢复的任务量")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("缓存")])]),t._v(" "),e("p",[t._v("应当在接口设计中增加缓存策略，服务端可以决定是否可以缓存当前返回的数据。通过此种方式，可以在一定程度上减少实际到达服务端请求，从而提高网络访问性能。")]),t._v(" "),e("p",[t._v("缓存的"),e("strong",[t._v("好处")]),t._v("：减少实际到达服务端请求，从而提高网络访问性能。")]),t._v(" "),e("p",[t._v("缓存的"),e("strong",[t._v("坏处")]),t._v("： 设计不当，将有可能导致大量的过期数据，进而影响系统运行。所以要合理的设置缓存，和缓存过期时间。")]),t._v(" "),e("blockquote",[e("p",[t._v("一般缓存：数据字典类数据、修改频率非常低的数据、实时性要求很低的数据等")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("系统分层")])]),t._v(" "),e("p",[t._v("在设计系统，尤其是大型系统，通常需要将系统按照不同的功能进行横向和纵向的分层。")]),t._v(" "),e("p",[t._v("横向分层：交互层、服务层、数据层等")]),t._v(" "),e("p",[t._v("纵向分层：按照不同的业务功能对系统进行切分")]),t._v(" "),e("p",[t._v("分层后，各模块可以独立进化，实现功能解耦，提高整个系统的可扩展性。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("统一接口")])]),t._v(" "),e("p",[t._v("统一接口，即是不同系统模块之间的调用接口统一规范，使用统一的调用协议，统一的数据格式等。统一接口带来的是系统交互的规范化，接口调用与业务解耦，各模块独立进化。")])])]),t._v(" "),e("h2",{attrs:{id:"什么是restful？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是restful？"}},[t._v("#")]),t._v(" 什么是RESTful？")]),t._v(" "),e("p",[t._v("如果"),e("strong",[t._v("一个架构符合REST原则，就称它为RESTful架构")])]),t._v(" "),e("p",[t._v("REST 是 **Representational State Transfer （表现层状态转化）**的缩写。")]),t._v(" "),e("p",[t._v("RESTful架构三个概念：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("面向资源（Resources）")]),t._v("：每种资源都对应与一个 "),e("strong",[t._v("URI")]),t._v(" （统一资源标识符）地址。")]),t._v(" "),e("li",[e("strong",[t._v("表述性（Representation）")]),t._v("："),e("strong",[t._v('把"资源"具体呈现出来的形式，叫做它的"表现层"')]),t._v("，URI是资源的位置，表现层提现在 HTTP 头信息中的"),e("code",[t._v("Accept")]),t._v(" 和 "),e("code",[t._v("Content-Type")])]),t._v(" "),e("li",[e("strong",[t._v("状态转化（State Transfer）")]),t._v('：客户端想要操作服务器，必须通过某种手段，让服务器端发生"状态转化"。而这种转化是建立在表现层之上的。体现在 HTTP头信息中的四种操作方式：'),e("strong",[t._v("GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源")])])]),t._v(" "),e("h2",{attrs:{id:"restful-api-设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#restful-api-设计"}},[t._v("#")]),t._v(" RESTful  API 设计")]),t._v(" "),e("h3",{attrs:{id:"什么是restful-api？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是restful-api？"}},[t._v("#")]),t._v(" 什么是Restful API？")]),t._v(" "),e("p",[t._v("在 REST 提出多年来，当前对于 REST 风格的应用最多的即是 Restful API")]),t._v(" "),e("p",[t._v("Restful API 分为对外接口和对内接口")]),t._v(" "),e("ul",[e("li",[t._v("对外：面向公网的公共服务接口，对外接口尽可能使用安全认证。")]),t._v(" "),e("li",[t._v("对内：一整套系统内部各个子系统或模块之间交互的标准接口，相对于对外接口，对内接口更标准化。")])]),t._v(" "),e("h3",{attrs:{id:"https-域名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#https-域名"}},[t._v("#")]),t._v(" HTTPS + 域名")]),t._v(" "),e("ul",[e("li",[t._v("在提供 Restful API ，特别是对外的 API 时，应当尽可能的使用 HTTPS 协议，以确保传输过程的安全。")]),t._v(" "),e("li",[t._v("在 API 地址中使用域名，可以进一步解耦服务端与客户端，服务端可以更加容易的迁移和扩展，而不会影响服务端的使用。")])]),t._v(" "),e("h3",{attrs:{id:"url-指向资源，http-动词指向操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#url-指向资源，http-动词指向操作"}},[t._v("#")]),t._v(" URL 指向资源，HTTP 动词指向操作")]),t._v(" "),e("p",[t._v("Restful API 的 URL 地址应指向具体的一个 "),e("strong",[t._v("资源")]),t._v(" ，例如用户 user 。URL 中应当只包含资源名词，不应该包含指向操作的动词，例如新建、查询、修改、删除等。具体操作通过 HTTP 动词（ GET / POST / PUT / DELETE ）指定。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://open.domain.com/app/getUser # 传统接口\nhttps://open.domain.com/app/addUser # 传统接口\n\nhttps://open.domain.com/app/user # Restful Api 风格\n# HTTP 指定动作\nGET /user：列出所有用户\nPOST /user：新建一个用户\nGET /user/ID：获取某个指定用户的信息\nPUT /user/ID：更新某个指定用户的信息（提供该用户的全部信息）\nPATCH /user/ID：更新某个指定用户的信息（提供该用户的部分信息）\nDELETE /user/ID：删除某个用户\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("p",[e("strong",[t._v("Restful API 设计注意点")]),t._v("：")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("指定版本号")]),t._v("：可以在URL、也可以在HTTP头信息中指定")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://open.domain.com/v1/app/user # 版本号放入 URL\nhttps://open.domain.com/app/user # 头信息指定\nHTTP header：\nAccept: vnd.example-com.foo+json; version=1.0\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("参数提交")]),t._v("：可以通过 URL参数 和 查询字符串方式")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://open.domain.com/v1/app/user/123 # URL参数\nhttps://open.domain.com/v1/app/user?ID=123 # 查询字符串方式 QueryString\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("安全机制")]),t._v("：特别是对公网开放的 Restful API，通常需要通过一定的安全认证机制来进行实现访问控制。目前主流的方案是通过 "),e("strong",[t._v("OAuth2.0")]),t._v(" 实现安全认证")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("返回数据")]),t._v("：返回的数据应是 JSON 格式")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("资源自描述性")]),t._v("：返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。这样用户只要记住一个 URL，就可以发现其他 URL。这种方法叫做 HATEOAS。比如 "),e("strong",[t._v("GitHub 的 API 都记载在 api.github.com")])])])]),t._v(" "),e("h2",{attrs:{id:"restful-api-vs-rpc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#restful-api-vs-rpc"}},[t._v("#")]),t._v(" RESTful API vs RPC")]),t._v(" "),e("h3",{attrs:{id:"优势：高效简洁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优势：高效简洁"}},[t._v("#")]),t._v(" 优势：高效简洁")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("面向资源的接口设计，相对于传统 RPC 降低了接口设计的复杂度。")])]),t._v(" "),e("li",[e("p",[t._v("相对于 SOAP/XML 形式的 RPC 服务，Restful API 采用 HTTP/JSON 的形式传递数据，降低了传输数据量，同时提高了数据解析的效率，单位时间内的负载能力会高于 SOAP WebService 服务。")])])]),t._v(" "),e("h3",{attrs:{id:"劣势："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#劣势："}},[t._v("#")]),t._v(" 劣势：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("对于一些复杂操作来说，接口设计难度将远大于 RPC 形式：如用户登录、商品下单。")])]),t._v(" "),e("li",[e("p",[t._v("没有类似于 SOAP 协议的规范性协议：")]),t._v(" "),e("p",[t._v("Restful API 中的数据格式、标准、安全性等都需要由开发者决定，这也就造成了无法建立统一的 Restful API 标准，作为客户端可能需要适配多种格式的 Restful API")])])]),t._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("ol",[e("li",[e("p",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000006735330",target:"_blank",rel:"noopener noreferrer"}},[t._v("Restful 应用分析"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/05/restful_api.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("RESTful API 设计指南"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://www.cnblogs.com/artech/p/restful-web-api-02.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("我所理解的RESTful Web API [设计篇]"),e("OutboundLink")],1)])])])])}),[],!1,null,null,null);s.default=r.exports}}]);